<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sparta</title>
    <link>http://gosparta.io/</link>
    <description>Recent content on Sparta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>mweagle@gmail.com (Matt Weagle)</managingEditor>
    <webMaster>mweagle@gmail.com (Matt Weagle)</webMaster>
    <lastBuildDate>Sun, 29 Nov 2015 06:50:17 +0000</lastBuildDate>
    <atom:link href="http://gosparta.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Overview</title>
      <link>http://gosparta.io/docs/apigateway/</link>
      <pubDate>Sun, 29 Nov 2015 06:50:17 +0000</pubDate>
      <author>mweagle@gmail.com (Matt Weagle)</author>
      <guid>http://gosparta.io/docs/apigateway/</guid>
      <description>&lt;p&gt;TODO: API Gateway documentation&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>http://gosparta.io/docs/concepts/</link>
      <pubDate>Sun, 29 Nov 2015 06:50:17 +0000</pubDate>
      <author>mweagle@gmail.com (Matt Weagle)</author>
      <guid>http://gosparta.io/docs/concepts/</guid>
      <description>&lt;p&gt;TODO: Concepts documentation&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>http://gosparta.io/docs/eventsources/</link>
      <pubDate>Sun, 29 Nov 2015 06:50:17 +0000</pubDate>
      <author>mweagle@gmail.com (Matt Weagle)</author>
      <guid>http://gosparta.io/docs/eventsources/</guid>
      <description>&lt;p&gt;TODO: Event source documentation&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>http://gosparta.io/docs/</link>
      <pubDate>Sun, 29 Nov 2015 06:50:17 +0000</pubDate>
      <author>mweagle@gmail.com (Matt Weagle)</author>
      <guid>http://gosparta.io/docs/</guid>
      <description>&lt;p&gt;Please choose a topic from the left.  The &lt;a href=&#34;./overview&#34;&gt;Overview&lt;/a&gt; section is a good place to start if you just want to get your hands dirty and provision a simple &amp;ldquo;Hello World&amp;rdquo; function.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>http://gosparta.io/docs/overview/</link>
      <pubDate>Sun, 29 Nov 2015 06:50:17 +0000</pubDate>
      <author>mweagle@gmail.com (Matt Weagle)</author>
      <guid>http://gosparta.io/docs/overview/</guid>
      <description>

&lt;p&gt;Sparta is a framework for developing and deploying &lt;em&gt;Go&lt;/em&gt; based AWS Lambda functions.  To help understand what that means we&amp;rsquo;ll begin with a &amp;ldquo;Hello World&amp;rdquo; lambda function and eventually deploy that to AWS.  Note that we&amp;rsquo;re not going to handle all possible error cases for this example to keep things short.&lt;/p&gt;

&lt;h2 id=&#34;preconditions:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Preconditions&lt;/h2&gt;

&lt;p&gt;Sparta uses the &lt;a href=&#34;http://aws.amazon.com/sdk-for-go/&#34;&gt;AWS SDK for Go&lt;/a&gt; to interact with AWS APIs.  Before you get started, ensure that you&amp;rsquo;ve properly configured the &lt;a href=&#34;https://github.com/aws/aws-sdk-go/wiki/configuring-sdk&#34;&gt;SDK credentials&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that you must use an AWS region that supports Lambda.  Consult the &lt;a href=&#34;https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/&#34;&gt;Global Infrastructure&lt;/a&gt; page for the most up to date release information.&lt;/p&gt;

&lt;h2 id=&#34;lambda-definition:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Lambda Definition&lt;/h2&gt;

&lt;p&gt;The first place to start is with the lambda function definition.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func helloWorld(event *json.RawMessage,
                context *sparta.LambdaContext,
                w http.ResponseWriter,
                logger *logrus.Logger) {
	fmt.Fprintf(w, &amp;#34;Hello World!&amp;#34;)
}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;All Sparta lambda functions have the same function signature that is composed of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;json.RawMessage&lt;/code&gt; :  The arbitrary &lt;code&gt;json.RawMessage&lt;/code&gt; event data provided to the function. Implementations may further unmarshal this data into event specific representations for events such as S3 item changes, API Gateway requests, etc.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LambdaContext&lt;/code&gt; : &lt;em&gt;Go&lt;/em&gt; compatible representation of the AWS Lambda &lt;a href=&#34;http://docs.aws.amazon.com/lambda/latest/dg/nodejs-prog-model-context.html&#34;&gt;Context&lt;/a&gt;. This struct includes fields such as &lt;code&gt;AWSRequestID&lt;/code&gt;, CloudWatch&amp;rsquo;s &lt;code&gt;LogGroupName&lt;/code&gt;, and the provisioned AWS lambda&amp;rsquo;s ARN (&lt;code&gt;InvokedFunctionARN&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http.ResponseWriter&lt;/code&gt; : The writer for any response data. Sparta uses the HTTP status code to determine the functions success or failure status, and any data written to the &lt;code&gt;responseWriter&lt;/code&gt; is published back via &lt;a href=&#34;http://docs.aws.amazon.com/lambda/latest/dg/nodejs-prog-model-context.html&#34;&gt;context.done()&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logrus.Logger&lt;/code&gt; : A &lt;a href=&#34;https://github.com/Sirupsen/logrus&#34;&gt;logrus&lt;/a&gt; logger preconfigured to produce JSON output.  Content written to this logger will be available in CloudWatch logs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;registration:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Registration&lt;/h2&gt;

&lt;p&gt;The next step is to register &lt;code&gt;helloWorld&lt;/code&gt; with Sparta.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;var lambdaFunctions []*sparta.LambdaAWSInfo

helloWorldFn := sparta.NewLambda(sparta.IAMRoleDefinition{},
                                helloWorld,
                                nil)
lambdaFunctions = append(lambdaFunctions, helloWorldFn)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;We first declare an empty slice &lt;code&gt;lambdaFunctions&lt;/code&gt; to which all our service&amp;rsquo;s lambda functions will be appended.  The next step is to create a new lambda function via &lt;code&gt;NewLambda&lt;/code&gt; that registers our golang function with Sparta.  &lt;code&gt;NewLambda&lt;/code&gt; accepts three parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;string|IAMRoleDefinition&lt;/code&gt; : Either a string literal that refers to a pre-existing IAM role under which the lambda function will be executed, &lt;em&gt;OR&lt;/em&gt; a &lt;code&gt;sparta.IAMRoleDefinition&lt;/code&gt; that will be provisioned as part of this deployment and used as the execution role for the lambda function.

&lt;ul&gt;
&lt;li&gt;In this example, we&amp;rsquo;re defining a new &lt;code&gt;IAMRoleDefinition&lt;/code&gt; as part of the stack.  This role definition will automatically include privileges for actions such as CloudWatch logging, and since our function doesn&amp;rsquo;t access any additional AWS services that&amp;rsquo;s all we need.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LambdaFunction&lt;/code&gt;: The &lt;em&gt;Go&lt;/em&gt; function to execute.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*LambdaFunctionOptions&lt;/code&gt;: A pointer to any additional execution settings (eg, timeout, memory settings, etc).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;delegation:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Delegation&lt;/h2&gt;

&lt;p&gt;The final step is to define a Sparta service under your applications &lt;code&gt;main&lt;/code&gt; package and provide the non-empty slice of lambda functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;sparta.Main(&amp;#34;MyHelloWorldStack&amp;#34;,
            &amp;#34;Simple Sparta application that demonstrates core functionality&amp;#34;,
            lambdaFunctions,
            nil)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;sparta.Main&lt;/code&gt; accepts four parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;serviceName&lt;/code&gt; : The string to use as the CloudFormation stackName. Note that there can be only a single stack with this name within a given AWS account, region pair.

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;serviceName&lt;/code&gt; is used as the stable identifier to determine when updates should be applied vs new stacks provisioned.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;serviceDescription&lt;/code&gt;: An optional string used to describe the stack.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[]*LambdaAWSInfo&lt;/code&gt; : Slice of &lt;code&gt;sparta.lambdaAWSInfo&lt;/code&gt; to provision&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*API&lt;/code&gt; : Optional pointer to data if you would like to provision and associate an API Gateway with the set of lambda functions.

&lt;ul&gt;
&lt;li&gt;We&amp;rsquo;ll walk through how to do that in a later example, but for now our lambda functions will only be accessible via the AWS SDK or Console.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;putting-it-together:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Putting It Together&lt;/h2&gt;

&lt;p&gt;Putting everything together, and including the necessary imports, we have:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;// File: main.go
package main

import (
	&amp;#34;encoding/json&amp;#34;
	&amp;#34;fmt&amp;#34;
	&amp;#34;net/http&amp;#34;

	&amp;#34;github.com/Sirupsen/logrus&amp;#34;
	sparta &amp;#34;github.com/mweagle/Sparta&amp;#34;
)

func helloWorld(event *json.RawMessage, context *sparta.LambdaContext, w http.ResponseWriter, logger *logrus.Logger) {
	fmt.Fprintf(w, &amp;#34;Hello World!&amp;#34;)
}

func main() {
	var lambdaFunctions []*sparta.LambdaAWSInfo

	helloWorldFn := sparta.NewLambda(sparta.IAMRoleDefinition{},
		helloWorld,
		nil)
	lambdaFunctions = append(lambdaFunctions, helloWorldFn)
	sparta.Main(&amp;#34;MyHelloWorldStack&amp;#34;,
		&amp;#34;Simple Sparta application that demonstrates core functionality&amp;#34;,
		lambdaFunctions,
		nil)
}&lt;/code&gt;&lt;/pre&gt;


&lt;h2 id=&#34;running-it:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Running It&lt;/h2&gt;

&lt;p&gt;Next download the Sparta dependencies via &lt;code&gt;go get ./...&lt;/code&gt; in the directory that you saved &lt;em&gt;main.go&lt;/em&gt;.  Once the packages are downloaded, first get a view of what&amp;rsquo;s going on by the &lt;code&gt;describe&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
go run main.go describe --out ./graph.html

INFO[0000] Welcome to Sparta                             Option=describe Version=0.0.7
INFO[0000] Verifying IAM Lambda execution roles
INFO[0000] IAM roles verified. Count: 1
INFO[0000] Compiling binary: MyHelloWorldStack.lambda.amd64
INFO[0007] Executable binary size (MB): 10
INFO[0007] Creating ZIP archive for upload: /Users/mweagle/Documents/golang/workspace/src/DOCTEST/MyHelloWorldStack737464669
INFO[0008] Creating NodeJS proxy entry: main_helloWorld
INFO[0008] Embedding CustomResource script: cfn-response.js
INFO[0008] Embedding CustomResource script: underscore-min.js
INFO[0008] Embedding CustomResource script: async.min.js
INFO[0008] Embedding CustomResource script: apigateway.js
INFO[0008] Embedding CustomResource script: s3.js
INFO[0008] Embedding CustomResource script: sns.js
INFO[0008] Embedding CustomResource script: golang-constants.json
INFO[0008] Bypassing S3 ZIP upload due to -n/-noop command line argument  Bucket=S3Bucket Key=MyHelloWorldStack737464669
INFO[0008] Bypassing template upload &amp;amp; creation due to -n/-noop command line argument  Bucket=S3Bucket Key=MyHelloWorldStack-edaad4631616d70ff87806dfd1399b0bc2f7994a-cf.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then open &lt;em&gt;graph.html&lt;/em&gt; in your browser (also linked &lt;a href=&#34;http://gosparta.io/images/overview/graph.html&#34;&gt;here&lt;/a&gt; ) to see what will be provisioned.&lt;/p&gt;

&lt;p&gt;Since everything looks good, we&amp;rsquo;ll provision the stack via &lt;code&gt;provision&lt;/code&gt; and verify the lambda function.  Note that the &lt;code&gt;$S3_BUCKET&lt;/code&gt; value must be an S3 bucket to which you have write access since Sparta uploads the lambda package and CloudFormation template to that bucket as part of provisioning.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go run main.go provision --s3Bucket $S3_BUCKET

INFO[0000] Welcome to Sparta                             Option=provision Version=0.0.7
INFO[0000] Verifying IAM Lambda execution roles
INFO[0000] IAM roles verified. Count: 1
INFO[0000] Compiling binary: MyHelloWorldStack.lambda.amd64
INFO[0007] Executable binary size (MB): 10
INFO[0007] Creating ZIP archive for upload: /Users/mweagle/Documents/golang/workspace/src/DOCTEST/MyHelloWorldStack650982716
INFO[0008] Creating NodeJS proxy entry: main_helloWorld
INFO[0008] Embedding CustomResource script: cfn-response.js
INFO[0008] Embedding CustomResource script: underscore-min.js
INFO[0008] Embedding CustomResource script: async.min.js
INFO[0008] Embedding CustomResource script: apigateway.js
INFO[0008] Embedding CustomResource script: s3.js
INFO[0008] Embedding CustomResource script: sns.js
INFO[0008] Embedding CustomResource script: golang-constants.json
INFO[0008] Uploading ZIP archive to S3
INFO[0012] ZIP archive uploaded: https://weagle.s3-us-west-2.amazonaws.com/MyHelloWorldStack650982716
INFO[0012] Uploading CloudFormation template
INFO[0012] CloudFormation template uploaded: https://weagle.s3-us-west-2.amazonaws.com/MyHelloWorldStack-8ae100efb4eddbed9debb45915a288a179b6592e-cf.json
INFO[0012] DescribeStackOutputError: ValidationError: Stack with id MyHelloWorldStack does not exist
	status code: 400, request id: defc0375-9a05-11e5-8ef6-d5823d3e35af
INFO[0012] Creating stack: arn:aws:cloudformation:us-west-2:027159405834:stack/MyHelloWorldStack/df0d6860-9a05-11e5-884c-5001230106a6
INFO[0012] Waiting for stack to complete
INFO[0022] Current state: CREATE_IN_PROGRESS
INFO[0052] Current state: CREATE_COMPLETE
INFO[0052] Stack Outputs:
INFO[0052] 	Output                                       Description=Sparta Home Key=SpartaHome Value=https://github.com/mweagle/Sparta
INFO[0052] 	Output                                       Description=Sparta Version Key=SpartaVersion Value=0.0.7
INFO[0052] Stack provisioned: {
  Capabilities: [&amp;quot;CAPABILITY_IAM&amp;quot;],
  CreationTime: 2015-12-03 21:36:11.325 +0000 UTC,
  Description: &amp;quot;Simple Sparta application that demonstrates core functionality&amp;quot;,
  DisableRollback: false,
  Outputs: [{
      Description: &amp;quot;Sparta Home&amp;quot;,
      OutputKey: &amp;quot;SpartaHome&amp;quot;,
      OutputValue: &amp;quot;https://github.com/mweagle/Sparta&amp;quot;
    },{
      Description: &amp;quot;Sparta Version&amp;quot;,
      OutputKey: &amp;quot;SpartaVersion&amp;quot;,
      OutputValue: &amp;quot;0.0.7&amp;quot;
    }],
  StackId: &amp;quot;arn:aws:cloudformation:us-west-2:027159405834:stack/MyHelloWorldStack/df0d6860-9a05-11e5-884c-5001230106a6&amp;quot;,
  StackName: &amp;quot;MyHelloWorldStack&amp;quot;,
  StackStatus: &amp;quot;CREATE_COMPLETE&amp;quot;,
  TimeoutInMinutes: 5
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the stack has been provisioned (&lt;code&gt;CREATE_COMPLETE&lt;/code&gt;), login to the AWS console and navigate to the Lambda section.&lt;/p&gt;

&lt;h2 id=&#34;testing:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Testing&lt;/h2&gt;

&lt;p&gt;Find your Lambda function in the list of AWS Lambda functions and click the hyperlink.  The display name will be prefixed by the name of your stack (&lt;em&gt;MyHelloWorldStack&lt;/em&gt; in our example):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gosparta.io/images/overview/AWS_Lambda_List.png&#34; alt=&#34;AWS Lambda List&#34; /&gt;&lt;/p&gt;

&lt;p&gt;On the Lambda details page, click the &lt;em&gt;Test&lt;/em&gt; button:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gosparta.io/images/overview/AWS_Lambda_Test.png&#34; alt=&#34;AWS Lambda Test&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Accept the Input Test Event sample (our Lambda function doesn&amp;rsquo;t consume the event data) and click &lt;em&gt;Save and test&lt;/em&gt;.  The execution result pane should display something similar to:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gosparta.io/images/overview/AWS_Lambda_Execution.png&#34; alt=&#34;AWS Lambda Execution&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;cleaning-up:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Cleaning Up&lt;/h2&gt;

&lt;p&gt;To prevent unauthorized usage and potential charges, make sure to &lt;code&gt;delete&lt;/code&gt; your stack before moving on:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go run main.go delete

INFO[0000] Welcome to Sparta                             Option=delete Version=0.0.7
INFO[0000] Stack exists: MyHelloWorldStack
INFO[0000] Stack delete issued: {

}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Congratulations! You&amp;rsquo;ve just deployed your first &amp;ldquo;serverless&amp;rdquo; service.  The following sections will dive deeper into what&amp;rsquo;s going on under the hood as well as how to integrate your lambda function(s) into the broader AWS landscape.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>http://gosparta.io/docs/walkthrough/</link>
      <pubDate>Sun, 29 Nov 2015 06:50:17 +0000</pubDate>
      <author>mweagle@gmail.com (Matt Weagle)</author>
      <guid>http://gosparta.io/docs/walkthrough/</guid>
      <description>&lt;p&gt;TODO: Walkthrough documentation&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>homepage</title>
      <link>http://gosparta.io/</link>
      <pubDate>Sun, 29 Nov 2015 06:50:17 +0000</pubDate>
      <author>mweagle@gmail.com (Matt Weagle)</author>
      <guid>http://gosparta.io/</guid>
      <description>

&lt;div class=&#34;jumbotron&#34;&gt;
  &lt;h1&gt;Sparta &lt;img src=&#34;images/spartanshieldsmall.png&#34; alt=&#34;Sparta shield&#34; height=&#34;80&#34; width=&#34;80&#34;&gt;&lt;/h1&gt;
  Build &amp; deploy &lt;b&gt;Go&lt;/b&gt; functions in AWS Lambda
  &lt;hr /&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&#34;No Server Is Easier To Manage Than No Server.&#34;&lt;/p&gt;
    &lt;footer&gt;Werner Vogels &lt;cite title=&#34;Source Title&#34;&gt;AWS re:Invent 2015&lt;/cite&gt;&lt;/footer&gt;
  &lt;/blockquote&gt;  
  &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/y-0Wf2Zyi5Q?start=1742&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Sparta provides a framework to build &amp;amp; deploy &lt;em&gt;Go&lt;/em&gt; functions in &lt;a href=&#34;https://aws.amazon.com/lambda/&#34;&gt;AWS Lambda&lt;/a&gt;. While &lt;em&gt;Go&lt;/em&gt; is not &lt;em&gt;yet&lt;/em&gt; officially supported by AWS Lambda (see &lt;a href=&#34;https://twitter.com/awscloud/status/659795641204260864&#34;&gt;poll&lt;/a&gt;), it&amp;rsquo;s possible to bundle &amp;amp; launch arbitrary executables in Lambda.&lt;/p&gt;

&lt;p&gt;Sparta provides a HTTP-based translation layer between the proper &lt;a href=&#34;http://docs.aws.amazon.com/lambda/latest/dg/programming-model.html&#34;&gt;NodeJS&lt;/a&gt; environment and your &lt;em&gt;Go&lt;/em&gt; binary.  In addition to this translation layer, Sparta is also able to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Manage S3 and SNS-based &lt;a href=&#34;http://docs.aws.amazon.com/lambda/latest/dg/intro-core-components.html#intro-core-components-event-sources&#34;&gt;event sources&lt;/a&gt;.

&lt;ul&gt;
&lt;li&gt;A Lambda function may be invoked in response to S3 or SNS broadcasted events.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Provision an HTTPS &lt;a href=&#34;https://aws.amazon.com/api-gateway/details/&#34;&gt;API Gateway&lt;/a&gt; service that allows Lambda functions to be publicly invoked.&lt;/li&gt;
&lt;li&gt;Produce diagrams of Lambda &amp;amp; event source interactions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;getting-started:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;To get started using Sparta, begin with the &lt;a href=&#34;./docs&#34;&gt;Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;problems:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Problems?&lt;/h2&gt;

&lt;p&gt;Please file an &lt;a href=&#34;https://github.com/mweagle/Sparta/issues/new&#34;&gt;issue&lt;/a&gt; in GitHub.  Thanks.&lt;/p&gt;

&lt;h3 id=&#34;other-resources:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Other resources&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.aws.amazon.com/lambda/latest/dg/limits.html&#34;&gt;Lambda limits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/blogs/compute/the-twelve-days-of-lambda/&#34;&gt;The Twelve Days of Lambda&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>