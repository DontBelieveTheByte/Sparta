<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sparta</title>
    <link>http://gosparta.io/</link>
    <description>Recent content on Sparta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>mweagle@gmail.com (Matt Weagle)</managingEditor>
    <webMaster>mweagle@gmail.com (Matt Weagle)</webMaster>
    <lastBuildDate>Sun, 29 Nov 2015 06:50:17 +0000</lastBuildDate>
    <atom:link href="http://gosparta.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Overview</title>
      <link>http://gosparta.io/docs/apigateway/</link>
      <pubDate>Sun, 29 Nov 2015 06:50:17 +0000</pubDate>
      <author>mweagle@gmail.com (Matt Weagle)</author>
      <guid>http://gosparta.io/docs/apigateway/</guid>
      <description>&lt;p&gt;TODO: API Gateway documentation&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>http://gosparta.io/docs/contributing/</link>
      <pubDate>Sun, 29 Nov 2015 06:50:17 +0000</pubDate>
      <author>mweagle@gmail.com (Matt Weagle)</author>
      <guid>http://gosparta.io/docs/contributing/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;http://gosparta.io/docs/overview&#34;&gt;Overview&lt;/a&gt; walked through a simple &amp;ldquo;Hello World&amp;rdquo; example.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>http://gosparta.io/docs/eventsources/cloudformation/</link>
      <pubDate>Sun, 29 Nov 2015 06:50:17 +0000</pubDate>
      <author>mweagle@gmail.com (Matt Weagle)</author>
      <guid>http://gosparta.io/docs/eventsources/cloudformation/</guid>
      <description>&lt;p&gt;&lt;span class=&#34;label label-warning&#34;&gt;NOT YET IMPLEMENTED&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;TODO: CloudFormation source documentation&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>http://gosparta.io/docs/eventsources/cloudwatchlogs/</link>
      <pubDate>Sun, 29 Nov 2015 06:50:17 +0000</pubDate>
      <author>mweagle@gmail.com (Matt Weagle)</author>
      <guid>http://gosparta.io/docs/eventsources/cloudwatchlogs/</guid>
      <description>&lt;p&gt;&lt;span class=&#34;label label-warning&#34;&gt;NOT YET IMPLEMENTED&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;TODO: CloudWatch Logs source documentation&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>http://gosparta.io/docs/eventsources/cognito/</link>
      <pubDate>Sun, 29 Nov 2015 06:50:17 +0000</pubDate>
      <author>mweagle@gmail.com (Matt Weagle)</author>
      <guid>http://gosparta.io/docs/eventsources/cognito/</guid>
      <description>&lt;p&gt;&lt;span class=&#34;label label-warning&#34;&gt;NOT YET IMPLEMENTED&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;TODO: Cognito source documentation&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>http://gosparta.io/docs/eventsources/dynamodb/</link>
      <pubDate>Sun, 29 Nov 2015 06:50:17 +0000</pubDate>
      <author>mweagle@gmail.com (Matt Weagle)</author>
      <guid>http://gosparta.io/docs/eventsources/dynamodb/</guid>
      <description>&lt;p&gt;&lt;span class=&#34;label label-warning&#34;&gt;NOT YET IMPLEMENTED&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;TODO: DynamoDB source documentation&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>http://gosparta.io/docs/eventsources/</link>
      <pubDate>Sun, 29 Nov 2015 06:50:17 +0000</pubDate>
      <author>mweagle@gmail.com (Matt Weagle)</author>
      <guid>http://gosparta.io/docs/eventsources/</guid>
      <description>&lt;p&gt;The true power of the AWS Lambda architecture is the ability to integrate Lambda execution with other AWS service state transitions.  Depending on the service type, state change events are either pushed or transparently polled and used as the input to a Lambda execution.&lt;/p&gt;

&lt;p&gt;There are several &lt;a href=&#34;http://docs.aws.amazon.com/lambda/latest/dg/intro-core-components.html&#34;&gt;event sources&lt;/a&gt; available:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gosparta.io/docs/eventsources/s3&#34;&gt;S3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gosparta.io/docs/eventsources/sns&#34;&gt;SNS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gosparta.io/docs/eventsources/dynamodb&#34;&gt;DynamoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gosparta.io/docs/eventsources/kinesis&#34;&gt;Kinesis&lt;/a&gt; &lt;span class=&#34;label label-warning&#34;&gt;NOT YET IMPLEMENTED&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gosparta.io/docs/eventsources/ses&#34;&gt;SES&lt;/a&gt; &lt;span class=&#34;label label-warning&#34;&gt;NOT YET IMPLEMENTED&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gosparta.io/docs/eventsources/cognito&#34;&gt;Cognito&lt;/a&gt; &lt;span class=&#34;label label-warning&#34;&gt;NOT YET IMPLEMENTED&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gosparta.io/docs/eventsources/cloudwatchlogs&#34;&gt;CloudWatch Logs&lt;/a&gt; &lt;span class=&#34;label label-warning&#34;&gt;NOT YET IMPLEMENTED&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gosparta.io/docs/eventsources/cloudformation&#34;&gt;CloudFormation&lt;/a&gt; &lt;span class=&#34;label label-warning&#34;&gt;NOT YET IMPLEMENTED&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>http://gosparta.io/docs/eventsources/kinesis/</link>
      <pubDate>Sun, 29 Nov 2015 06:50:17 +0000</pubDate>
      <author>mweagle@gmail.com (Matt Weagle)</author>
      <guid>http://gosparta.io/docs/eventsources/kinesis/</guid>
      <description>&lt;p&gt;&lt;span class=&#34;label label-warning&#34;&gt;NOT YET IMPLEMENTED&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;TODO: Kinesis source documentation&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>http://gosparta.io/docs/eventsources/s3/</link>
      <pubDate>Sun, 29 Nov 2015 06:50:17 +0000</pubDate>
      <author>mweagle@gmail.com (Matt Weagle)</author>
      <guid>http://gosparta.io/docs/eventsources/s3/</guid>
      <description>

&lt;p&gt;In this section we&amp;rsquo;ll walkthrough how to trigger your lambda function in response to S3 events.  This overview is based on the &lt;a href=&#34;https://github.com/mweagle/SpartaImager&#34;&gt;SpartaImager&lt;/a&gt; sample code if you&amp;rsquo;d rather jump to the end result.&lt;/p&gt;

&lt;h2 id=&#34;a-href-hugoshortcode-1-goal-a:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;&lt;a href=&#34;#goal:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Goal&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Assume we have an S3 bucket that stores images.  You&amp;rsquo;ve been asked to write a service that creates a duplicate image that includes a characteristic stamp overlay and store it in the same S3 bucket.&lt;/p&gt;

&lt;h2 id=&#34;a-href-hugoshortcode-2-getting-started-a:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;&lt;a href=&#34;#gettingStarted:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Getting Started&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ll start with an empty lambda function and build up the needed functionality.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func transformImage(event *json.RawMessage,
                  context *sparta.LambdaContext,
                  w http.ResponseWriter,
                  logger *logrus.Logger)
{
  logger.WithFields(logrus.Fields{
		&amp;#34;RequestID&amp;#34;: context.AWSRequestID,
		&amp;#34;Event&amp;#34;:     string(*event),
	}).Info(&amp;#34;Request received&amp;#34;)
}&lt;/code&gt;&lt;/pre&gt;


&lt;h2 id=&#34;a-href-hugoshortcode-4-unmarshalling-the-s3-event-a:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;&lt;a href=&#34;#unmarshalS3Event:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Unmarshalling the S3 Event&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Since the &lt;code&gt;transformImage&lt;/code&gt; is expected to be triggered by S3 event changes, we will unmarshal the &lt;code&gt;*json.RawMessage&lt;/code&gt; data into an S3-specific event provided by Sparta via:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;var lambdaEvent spartaS3.Event
err := json.Unmarshal([]byte(*event), &amp;amp;lambdaEvent)
if err != nil {
  logger.Error(&amp;#34;Failed to unmarshal event data: &amp;#34;, err.Error())
  http.Error(w, err.Error(), http.StatusInternalServerError)
}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;S3 events are delivered in batches, via lists of &lt;a href=&#34;https://godoc.org/github.com/mweagle/Sparta/aws/s3#EventRecord&#34;&gt;EventRecords&lt;/a&gt;, so we&amp;rsquo;ll need to process each record.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;for _, eachRecord := range lambdaEvent.Records {
  err = nil
  switch eachRecord.EventName {
  case &amp;#34;ObjectCreated:Put&amp;#34;:
    {
      err = stampImage(eachRecord.S3.Bucket.Name, eachRecord.S3.Object.Key, logger)
    }
  case &amp;#34;s3:ObjectRemoved:Delete&amp;#34;:
    {
      // Delete stamped image
    }
  default:
    {
      logger.Info(&amp;#34;Unsupported event: &amp;#34;, eachRecord.EventName)
    }
  }

  //
  if err != nil {
    logger.Error(&amp;#34;Failed to process event: &amp;#34;, err.Error())
    http.Error(w, err.Error(), http.StatusInternalServerError)
  }
}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The &lt;a href=&#34;https://github.com/mweagle/SpartaImager/blob/master/application.go#L57&#34;&gt;stampImage&lt;/a&gt; function does most of the work, fetching the S3 image to memory, applying the stamp, and putting the transformed content back to S3 with a new name.  It uses a simple &lt;strong&gt;xformed_&lt;/strong&gt; keyname prefix to identify items which have already been stamped &amp;amp; prevents an &amp;ldquo;event-storm&amp;rdquo; from being triggered.  This simple approach is acceptable for an example, but in production you should use a more durable approach.&lt;/p&gt;

&lt;h2 id=&#34;a-href-hugoshortcode-7-sparta-integration-a:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;&lt;a href=&#34;#gettingStarted:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Sparta Integration&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;With the core of the &lt;code&gt;transformImage&lt;/code&gt; complete, the next step is to integrate the &lt;em&gt;Go&lt;/em&gt; function with Sparta.  This is performed by the &lt;a href=&#34;https://github.com/mweagle/SpartaImager/blob/master/application.go#L200&#34;&gt;imagerFunctions&lt;/a&gt; source.&lt;/p&gt;

&lt;p&gt;Our lambda function needs to both &lt;em&gt;Get&lt;/em&gt; and &lt;em&gt;Put&lt;/em&gt; items back to an S3 bucket, so we need an IAM Role that grants those privileges under which the function will execute:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;// Provision an IAM::Role as part of this application
var iamRole = sparta.IAMRoleDefinition{}

// Setup the ARN that includes all child keys
resourceArn := fmt.Sprintf(&amp;#34;%s/*&amp;#34;, s3EventBroadcasterBucket)
iamRole.Privileges = append(iamRole.Privileges, sparta.IAMRolePrivilege{
  Actions: []string{&amp;#34;s3:GetObject&amp;#34;,
    &amp;#34;s3:PutObject&amp;#34;,
  },
  Resource: resourceArn,
})&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The &lt;code&gt;s3EventBroadcasterBucket&lt;/code&gt; param is the ARN of the S3 bucket that will trigger your lambda function (eg: &lt;em&gt;arn:aws:s3:::MyImagingS3Bucket&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;With the IAM Role defined, we can create the Sparta lambda function for &lt;code&gt;transformImage&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;// The default timeout is 3 seconds - increase that to 30 seconds s.t. the
// transform lambda doesn&amp;#39;t fail early.
transformOptions := &amp;amp;sparta.LambdaFunctionOptions{
  Description: &amp;#34;Stamp assets in S3&amp;#34;,
  MemorySize:  128,
  Timeout:     30,
}
lambdaFn := sparta.NewLambda(iamRole, transformImage, transformOptions)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;It typically takes more than 3 seconds to apply the transform, so we increase the execution timeout and provision a new lambda function using the &lt;code&gt;iamRole&lt;/code&gt; we defined earlier.&lt;/p&gt;

&lt;h2 id=&#34;a-href-hugoshortcode-10-event-source-registration-a:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;&lt;a href=&#34;#eventSourceRegistration:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Event Source Registration&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;If we were to deploy this Sparta application, the &lt;code&gt;transformImage&lt;/code&gt; function would have the ability to &lt;em&gt;Get&lt;/em&gt; and &lt;em&gt;Put&lt;/em&gt; back to the &lt;code&gt;s3EventBroadcasterBucket&lt;/code&gt;, but would not be invoked in response to events triggered by that bucket.  To register for state change events, we need to configure the lambda&amp;rsquo;s &lt;a href=&#34;http://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html&#34;&gt;Permissions&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;//////////////////////////////////////////////////////////////////////////////
// S3 configuration
//
lambdaFn.Permissions = append(lambdaFn.Permissions, sparta.S3Permission{
  BasePermission: sparta.BasePermission{
    SourceArn: s3EventBroadcasterBucket,
  },
  Events: []string{&amp;#34;s3:ObjectCreated:*&amp;#34;, &amp;#34;s3:ObjectRemoved:*&amp;#34;},
})
lambdaFunctions = append(lambdaFunctions, lambdaFn)&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;Sparta&lt;/code&gt; generates the CloudFormation template, it scans for &lt;code&gt;Permission&lt;/code&gt; configurations.  For &lt;a href=&#34;http://docs.aws.amazon.com/lambda/latest/dg/intro-invocation-modes.html&#34;&gt;push based sources&lt;/a&gt; like S3, Sparta uses that service&amp;rsquo;s APIs to register your lambda function as a publishing target for events.  This remote registration is handled automatically by CustomResources added to the CloudFormation template.&lt;/p&gt;

&lt;h2 id=&#34;a-href-hugoshortcode-12-wrapping-up-a:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;&lt;a href=&#34;#wrappingUp:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Wrapping Up&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;With the &lt;code&gt;lambdaFn&lt;/code&gt; fully defined, we can provide it to &lt;code&gt;sparta.Main()&lt;/code&gt; and deploy our service.  The workflow below is shared by all S3-triggered lambda:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Define the lambda function (&lt;code&gt;transformImage&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Implement the associated business logic  (&lt;code&gt;stampImage&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;If needed, create the required &lt;a href=&#34;https://godoc.org/github.com/mweagle/Sparta*IAMRoleDefinition&#34;&gt;IAMRoleDefinition&lt;/a&gt; with appropriate privileges.&lt;/li&gt;
&lt;li&gt;Provide the lambda function &amp;amp; IAMRoleDefinition to &lt;code&gt;sparta.NewLambda()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add the necessary &lt;a href=&#34;https://godoc.org/github.com/mweagle/Sparta#LambdaAWSInfo&#34;&gt;Permissions&lt;/a&gt; to the &lt;code&gt;LambdaAWSInfo&lt;/code&gt; struct.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/mweagle/SpartaImager&#34;&gt;SpartaImager&lt;/a&gt; repo contains the full code, and includes &lt;a href=&#34;http://gosparta.io/docs/apigateway&#34;&gt;API Gateway&lt;/a&gt; support that allows you to publicly fetch the stamped image via an expiring S3 URL.&lt;/p&gt;

&lt;h2 id=&#34;a-href-hugoshortcode-13-other-resources-a:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;&lt;a href=&#34;#otherResources:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Other Resources&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The AWS docs have an excellent &lt;a href=&#34;http://docs.aws.amazon.com/lambda/latest/dg/getting-started-amazons3-events.html&#34;&gt;S3 event source&lt;/a&gt; walkthrough.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>http://gosparta.io/docs/eventsources/ses/</link>
      <pubDate>Sun, 29 Nov 2015 06:50:17 +0000</pubDate>
      <author>mweagle@gmail.com (Matt Weagle)</author>
      <guid>http://gosparta.io/docs/eventsources/ses/</guid>
      <description>&lt;p&gt;&lt;span class=&#34;label label-warning&#34;&gt;NOT YET IMPLEMENTED&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;TODO: SES source documentation&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>http://gosparta.io/docs/eventsources/sns/</link>
      <pubDate>Sun, 29 Nov 2015 06:50:17 +0000</pubDate>
      <author>mweagle@gmail.com (Matt Weagle)</author>
      <guid>http://gosparta.io/docs/eventsources/sns/</guid>
      <description>&lt;p&gt;TODO: SNS source documentation&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>http://gosparta.io/docs/</link>
      <pubDate>Sun, 29 Nov 2015 06:50:17 +0000</pubDate>
      <author>mweagle@gmail.com (Matt Weagle)</author>
      <guid>http://gosparta.io/docs/</guid>
      <description>&lt;p&gt;Please choose a topic from the left.  The &lt;a href=&#34;./overview&#34;&gt;Overview&lt;/a&gt; section is a good place to start if you just want to get your hands dirty and provision a simple &amp;ldquo;Hello World&amp;rdquo; function.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>http://gosparta.io/docs/miscellaneous/</link>
      <pubDate>Sun, 29 Nov 2015 06:50:17 +0000</pubDate>
      <author>mweagle@gmail.com (Matt Weagle)</author>
      <guid>http://gosparta.io/docs/miscellaneous/</guid>
      <description>&lt;p&gt;TODO: Concepts documentation&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>http://gosparta.io/docs/overview/</link>
      <pubDate>Sun, 29 Nov 2015 06:50:17 +0000</pubDate>
      <author>mweagle@gmail.com (Matt Weagle)</author>
      <guid>http://gosparta.io/docs/overview/</guid>
      <description>

&lt;p&gt;Sparta is a framework for developing and deploying &lt;em&gt;Go&lt;/em&gt; based AWS Lambda functions.  To help understand what that means we&amp;rsquo;ll begin with a &amp;ldquo;Hello World&amp;rdquo; lambda function and eventually deploy that to AWS.  Note that we&amp;rsquo;re not going to handle all error cases to keep the example code to a minimum.&lt;/p&gt;

&lt;h2 id=&#34;a-href-hugoshortcode-1-preconditions-a:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;&lt;a href=&#34;#preconditions:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Preconditions&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Sparta uses the &lt;a href=&#34;http://aws.amazon.com/sdk-for-go/&#34;&gt;AWS SDK for Go&lt;/a&gt; to interact with AWS APIs.  Before you get started, ensure that you&amp;rsquo;ve properly configured the &lt;a href=&#34;https://github.com/aws/aws-sdk-go/wiki/configuring-sdk&#34;&gt;SDK credentials&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that you must use an AWS region that supports Lambda.  Consult the &lt;a href=&#34;https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/&#34;&gt;Global Infrastructure&lt;/a&gt; page for the most up to date release information.&lt;/p&gt;

&lt;h2 id=&#34;a-href-hugoshortcode-2-lambda-definition-a:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;&lt;a href=&#34;#lambdaDefinition:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Lambda Definition&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;The first place to start is with the lambda function definition.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func helloWorld(event *json.RawMessage,
                context *sparta.LambdaContext,
                w http.ResponseWriter,
                logger *logrus.Logger) {
	fmt.Fprintf(w, &amp;#34;Hello World!&amp;#34;)
}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;All Sparta lambda functions have the same function signature that is composed of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;json.RawMessage&lt;/code&gt; :  The arbitrary &lt;code&gt;json.RawMessage&lt;/code&gt; event data provided to the function. Implementations may further unmarshal this data into event specific representations for events such as S3 item changes, API Gateway requests, etc.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LambdaContext&lt;/code&gt; : &lt;em&gt;Go&lt;/em&gt; compatible representation of the AWS Lambda &lt;a href=&#34;http://docs.aws.amazon.com/lambda/latest/dg/nodejs-prog-model-context.html&#34;&gt;Context&lt;/a&gt;. This struct includes fields such as &lt;code&gt;AWSRequestID&lt;/code&gt;, CloudWatch&amp;rsquo;s &lt;code&gt;LogGroupName&lt;/code&gt;, and the provisioned AWS lambda&amp;rsquo;s ARN (&lt;code&gt;InvokedFunctionARN&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http.ResponseWriter&lt;/code&gt; : The writer for any response data. Sparta uses the HTTP status code to determine the functions success or failure status, and any data written to the &lt;code&gt;responseWriter&lt;/code&gt; is published back via &lt;a href=&#34;http://docs.aws.amazon.com/lambda/latest/dg/nodejs-prog-model-context.html&#34;&gt;context.done()&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logrus.Logger&lt;/code&gt; : A &lt;a href=&#34;https://github.com/Sirupsen/logrus&#34;&gt;logrus&lt;/a&gt; logger preconfigured to produce JSON output.  Content written to this logger will be available in CloudWatch logs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;a-href-hugoshortcode-4-creation-a:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;&lt;a href=&#34;#creation:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Creation&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;The next step is to create a Sparta-wrapped version of the &lt;code&gt;helloWorld&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;var lambdaFunctions []*sparta.LambdaAWSInfo

helloWorldFn := sparta.NewLambda(sparta.IAMRoleDefinition{},
                                helloWorld,
                                nil)
lambdaFunctions = append(lambdaFunctions, helloWorldFn)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;We first declare an empty slice &lt;code&gt;lambdaFunctions&lt;/code&gt; to which all our service&amp;rsquo;s lambda functions will be appended.  The next step is to create a new lambda function via &lt;code&gt;NewLambda&lt;/code&gt;.  &lt;code&gt;NewLambda&lt;/code&gt; accepts three parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;string|IAMRoleDefinition&lt;/code&gt; : Either a string literal that refers to a pre-existing IAM role under which the lambda function will be executed, &lt;em&gt;OR&lt;/em&gt; a &lt;code&gt;sparta.IAMRoleDefinition&lt;/code&gt; that will be provisioned as part of this deployment and used as the execution role for the lambda function.

&lt;ul&gt;
&lt;li&gt;In this example, we&amp;rsquo;re defining a new &lt;code&gt;IAMRoleDefinition&lt;/code&gt; as part of the stack.  This role definition will automatically include privileges for actions such as CloudWatch logging, and since our function doesn&amp;rsquo;t access any additional AWS services that&amp;rsquo;s all we need.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LambdaFunction&lt;/code&gt;: The &lt;em&gt;Go&lt;/em&gt; function to execute.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*LambdaFunctionOptions&lt;/code&gt;: A pointer to any additional execution settings (eg, timeout, memory settings, etc).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;a-href-hugoshortcode-6-delegation-a:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;&lt;a href=&#34;#delegation:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Delegation&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;The final step is to define a Sparta service under your applications &lt;code&gt;main&lt;/code&gt; package and provide the non-empty slice of lambda functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;sparta.Main(&amp;#34;MyHelloWorldStack&amp;#34;,
            &amp;#34;Simple Sparta application that demonstrates core functionality&amp;#34;,
            lambdaFunctions,
            nil)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;sparta.Main&lt;/code&gt; accepts four parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;serviceName&lt;/code&gt; : The string to use as the CloudFormation stackName. Note that there can be only a single stack with this name within a given AWS account, region pair.

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;serviceName&lt;/code&gt; is used as the stable identifier to determine when updates should be applied vs new stacks provisioned.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;serviceDescription&lt;/code&gt;: An optional string used to describe the stack.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[]*LambdaAWSInfo&lt;/code&gt; : Slice of &lt;code&gt;sparta.lambdaAWSInfo&lt;/code&gt; to provision&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*API&lt;/code&gt; : Optional pointer to data if you would like to provision and associate an API Gateway with the set of lambda functions.

&lt;ul&gt;
&lt;li&gt;We&amp;rsquo;ll walk through how to do that in a later example, but for now our lambda function will only be accessible via the AWS SDK or Console.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Delegating &lt;code&gt;main()&lt;/code&gt; to &lt;code&gt;Sparta.Main()&lt;/code&gt; transforms the set of lambda functions into a standalone executable with several command line options.  Run &lt;code&gt;go run main.go --help&lt;/code&gt; to see the available options.&lt;/p&gt;

&lt;h2 id=&#34;a-href-hugoshortcode-8-putting-it-together-a:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;&lt;a href=&#34;#puttingItTogether:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Putting It Together&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Putting everything together, and including the necessary imports, we have:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;// File: main.go
package main

import (
	&amp;#34;encoding/json&amp;#34;
	&amp;#34;fmt&amp;#34;
	&amp;#34;net/http&amp;#34;

	&amp;#34;github.com/Sirupsen/logrus&amp;#34;
	sparta &amp;#34;github.com/mweagle/Sparta&amp;#34;
)

func helloWorld(event *json.RawMessage, context *sparta.LambdaContext, w http.ResponseWriter, logger *logrus.Logger) {
	fmt.Fprintf(w, &amp;#34;Hello World!&amp;#34;)
}

func main() {
	var lambdaFunctions []*sparta.LambdaAWSInfo

	helloWorldFn := sparta.NewLambda(sparta.IAMRoleDefinition{},
		helloWorld,
		nil)
	lambdaFunctions = append(lambdaFunctions, helloWorldFn)
	sparta.Main(&amp;#34;MyHelloWorldStack&amp;#34;,
		&amp;#34;Simple Sparta application that demonstrates core functionality&amp;#34;,
		lambdaFunctions,
		nil)
}&lt;/code&gt;&lt;/pre&gt;


&lt;h2 id=&#34;a-href-hugoshortcode-10-running-it-a:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;&lt;a href=&#34;#runningIt:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Running It&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Next download the Sparta dependencies via &lt;code&gt;go get ./...&lt;/code&gt; in the directory that you saved &lt;em&gt;main.go&lt;/em&gt;.  Once the packages are downloaded, first get a view of what&amp;rsquo;s going on by the &lt;code&gt;describe&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;go run main.go describe --out ./graph.html

INFO[0000] Welcome to Sparta                             Option=describe Version=0.0.7
INFO[0000] Verifying IAM Lambda execution roles
INFO[0000] IAM roles verified. Count: 1
INFO[0000] Compiling binary: MyHelloWorldStack.lambda.amd64
INFO[0007] Executable binary size (MB): 10
INFO[0007] Creating ZIP archive for upload: /Users/mweagle/Documents/golang/workspace/src/HelloWorld/MyHelloWorldStack737464669
INFO[0008] Creating NodeJS proxy entry: main_helloWorld
INFO[0008] Embedding CustomResource script: cfn-response.js
INFO[0008] Embedding CustomResource script: underscore-min.js
INFO[0008] Embedding CustomResource script: async.min.js
INFO[0008] Embedding CustomResource script: apigateway.js
INFO[0008] Embedding CustomResource script: s3.js
INFO[0008] Embedding CustomResource script: sns.js
INFO[0008] Embedding CustomResource script: golang-constants.json
INFO[0008] Bypassing S3 ZIP upload due to -n/-noop command line argument  Bucket=S3Bucket Key=MyHelloWorldStack737464669
INFO[0008] Bypassing template upload &amp;amp; creation due to -n/-noop command line argument  Bucket=S3Bucket Key=MyHelloWorldStack-edaad4631616d70ff87806dfd1399b0bc2f7994a-cf.json&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then open &lt;em&gt;graph.html&lt;/em&gt; in your browser (also linked &lt;a href=&#34;http://gosparta.io/images/overview/graph.html&#34;&gt;here&lt;/a&gt; ) to see what will be provisioned.&lt;/p&gt;

&lt;p&gt;Since everything looks good, we&amp;rsquo;ll provision the stack via &lt;code&gt;provision&lt;/code&gt; and verify the lambda function.  Note that the &lt;code&gt;$S3_BUCKET&lt;/code&gt; value must be an S3 bucket to which you have write access since Sparta uploads the lambda package and CloudFormation template to that bucket as part of provisioning.&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;go run main.go provision --s3Bucket $S3_BUCKET

INFO[0000] Welcome to Sparta                             Option=provision Version=0.0.7
INFO[0000] Verifying IAM Lambda execution roles
INFO[0000] IAM roles verified. Count: 1
INFO[0000] Compiling binary: MyHelloWorldStack.lambda.amd64
INFO[0007] Executable binary size (MB): 10
INFO[0007] Creating ZIP archive for upload: /Users/mweagle/Documents/golang/workspace/src/HelloWorld/MyHelloWorldStack650982716
INFO[0008] Creating NodeJS proxy entry: main_helloWorld
INFO[0008] Embedding CustomResource script: cfn-response.js
INFO[0008] Embedding CustomResource script: underscore-min.js
INFO[0008] Embedding CustomResource script: async.min.js
INFO[0008] Embedding CustomResource script: apigateway.js
INFO[0008] Embedding CustomResource script: s3.js
INFO[0008] Embedding CustomResource script: sns.js
INFO[0008] Embedding CustomResource script: golang-constants.json
INFO[0008] Uploading ZIP archive to S3
INFO[0012] ZIP archive uploaded: https://weagle.s3-us-west-2.amazonaws.com/MyHelloWorldStack650982716
INFO[0012] Uploading CloudFormation template
INFO[0012] CloudFormation template uploaded: https://weagle.s3-us-west-2.amazonaws.com/MyHelloWorldStack-8ae100efb4eddbed9debb45915a288a179b6592e-cf.json
INFO[0012] DescribeStackOutputError: ValidationError: Stack with id MyHelloWorldStack does not exist
	status code: 400, request id: defc0375-9a05-11e5-8ef6-d5823d3e35af
INFO[0012] Creating stack: arn:aws:cloudformation:us-west-2:123412341234:stack/MyHelloWorldStack/df0d6860-9a05-11e5-884c-5001230106a6
INFO[0012] Waiting for stack to complete
INFO[0022] Current state: CREATE_IN_PROGRESS
INFO[0052] Current state: CREATE_COMPLETE
INFO[0052] Stack Outputs:
INFO[0052] 	Output                                       Description=Sparta Home Key=SpartaHome Value=https://github.com/mweagle/Sparta
INFO[0052] 	Output                                       Description=Sparta Version Key=SpartaVersion Value=0.0.7
INFO[0052] Stack provisioned: {
  Capabilities: [&amp;#34;CAPABILITY_IAM&amp;#34;],
  CreationTime: 2015-12-03 21:36:11.325 &amp;#43;0000 UTC,
  Description: &amp;#34;Simple Sparta application that demonstrates core functionality&amp;#34;,
  DisableRollback: false,
  Outputs: [{
      Description: &amp;#34;Sparta Home&amp;#34;,
      OutputKey: &amp;#34;SpartaHome&amp;#34;,
      OutputValue: &amp;#34;https://github.com/mweagle/Sparta&amp;#34;
    },{
      Description: &amp;#34;Sparta Version&amp;#34;,
      OutputKey: &amp;#34;SpartaVersion&amp;#34;,
      OutputValue: &amp;#34;0.0.7&amp;#34;
    }],
  StackId: &amp;#34;arn:aws:cloudformation:us-west-2:123412341234:stack/MyHelloWorldStack/df0d6860-9a05-11e5-884c-5001230106a6&amp;#34;,
  StackName: &amp;#34;MyHelloWorldStack&amp;#34;,
  StackStatus: &amp;#34;CREATE_COMPLETE&amp;#34;,
  TimeoutInMinutes: 5
}&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;Once the stack has been provisioned (&lt;code&gt;CREATE_COMPLETE&lt;/code&gt;), login to the AWS console and navigate to the Lambda section.&lt;/p&gt;

&lt;h2 id=&#34;testing:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Testing&lt;/h2&gt;

&lt;p&gt;Find your Lambda function in the list of AWS Lambda functions and click the hyperlink.  The display name will be prefixed by the name of your stack (&lt;em&gt;MyHelloWorldStack&lt;/em&gt; in our example):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gosparta.io/images/overview/AWS_Lambda_List.png&#34; alt=&#34;AWS Lambda List&#34; /&gt;&lt;/p&gt;

&lt;p&gt;On the Lambda details page, click the &lt;em&gt;Test&lt;/em&gt; button:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gosparta.io/images/overview/AWS_Lambda_Test.png&#34; alt=&#34;AWS Lambda Test&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Accept the Input Test Event sample (our Lambda function doesn&amp;rsquo;t consume the event data) and click &lt;em&gt;Save and test&lt;/em&gt;.  The execution result pane should display something similar to:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gosparta.io/images/overview/AWS_Lambda_Execution.png&#34; alt=&#34;AWS Lambda Execution&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;a-href-hugoshortcode-13-cleaning-up-a:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;&lt;a href=&#34;#cleaningUp:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Cleaning Up&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;To prevent unauthorized usage and potential charges, make sure to &lt;code&gt;delete&lt;/code&gt; your stack before moving on:&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;go run main.go delete

INFO[0000] Welcome to Sparta                             Option=delete Version=0.0.7
INFO[0000] Stack exists: MyHelloWorldStack
INFO[0000] Stack delete issued: {

}&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;

&lt;h2 id=&#34;a-href-hugoshortcode-15-conclusion-a:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;&lt;a href=&#34;#conclusion:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Congratulations! You&amp;rsquo;ve just deployed your first &amp;ldquo;serverless&amp;rdquo; service.  The following sections will dive deeper into what&amp;rsquo;s going on under the hood as well as how to integrate your lambda function(s) into the broader AWS landscape.&lt;/p&gt;

&lt;p&gt;Next: &lt;a href=&#34;http://gosparta.io/docs/walkthrough&#34;&gt;Walkthrough&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Walkthrough</title>
      <link>http://gosparta.io/docs/walkthrough/</link>
      <pubDate>Sun, 29 Nov 2015 06:50:17 +0000</pubDate>
      <author>mweagle@gmail.com (Matt Weagle)</author>
      <guid>http://gosparta.io/docs/walkthrough/</guid>
      <description>

&lt;p&gt;The &lt;a href=&#34;http://gosparta.io/docs/overview&#34;&gt;Overview&lt;/a&gt; walked through a simple &amp;ldquo;Hello World&amp;rdquo; example.  In this section we&amp;rsquo;ll cover how Sparta works in preparation for moving on to more advanced usages.&lt;/p&gt;

&lt;h3 id=&#34;a-href-hugoshortcode-1-provisioning-flow-a:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;&lt;a href=&#34;#provisioningFlow:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Provisioning Flow&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The provisioning workflow is defined in &lt;a href=&#34;https://github.com/mweagle/Sparta/blob/master/provision.go&#34;&gt;provision.go&lt;/a&gt;, with a singular goal of encapsulating all AWS mutations into a &lt;a href=&#34;http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html&#34;&gt;CloudFormation&lt;/a&gt; template.  Where CloudFormation does not support a given service, Sparta injects &lt;a href=&#34;http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources-lambda.html&#34;&gt;Lambda-backed Custom Resources&lt;/a&gt; into the template definition.&lt;/p&gt;

&lt;p&gt;At a high level, provisioning uses the flow below.  We&amp;rsquo;ll dive a bit deeper into each stage in the following sections.&lt;/p&gt;

&lt;div class=&#34;mermaid&#34;&gt;
    
    graph TD
      iam[Verify IAM Roles]
      compile[Compile]
      package[Package]
      upload[Upload Archive to S3]
      generate[Generate CF Template]
      uploadTemplate[Upload Template to S3]
      converge[Create/Update Stack]

      iam--&gt;compile
      compile--&gt;package
      package--&gt;upload
      upload--&gt;generate
      generate--&gt;uploadTemplate
      uploadTemplate--&gt;converge

&lt;/div&gt;


&lt;h3 id=&#34;a-href-hugoshortcode-3-verify-iam-roles-a:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;&lt;a href=&#34;#verifyiamroles:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Verify IAM Roles&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;NewLambda&lt;/code&gt; function accepts either a &lt;code&gt;string&lt;/code&gt; or a &lt;code&gt;sparta.IAMRoleDefinition&lt;/code&gt; value type.  In the event that a string is passed, this function verifies that the IAM role exists and builds up a cache of IAM role information that can be shared and referenced during template generation. Specifically, a pre-existing &lt;a href=&#34;http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns&#34;&gt;IAM Role ARN&lt;/a&gt; is cached to minimize AWS calls during template generation.&lt;/p&gt;

&lt;h3 id=&#34;a-href-hugoshortcode-4-compile-a:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;&lt;a href=&#34;#compile:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Compile&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The next step is to cross compile the application to a binary that can be executed on an AWS Lambda instance.  The compile flags are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TAGS&lt;/strong&gt;:         &lt;code&gt;-tags lambdabinary&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ENVIRONMENT&lt;/strong&gt;:  &lt;code&gt;GOOS=linux GOARCH=amd64 GO15VENDOREXPERIMENT=1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The binary is built in the current directory with a &lt;em&gt;.lambda.amd64&lt;/em&gt; suffix.&lt;/p&gt;

&lt;h3 id=&#34;a-href-hugoshortcode-5-package-a:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;&lt;a href=&#34;#package:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Package&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The end result of the package phase is a ZIP archive containing everything needed to deploy your service.
This includes the NodeJS proxy entries that forward AWS Lambda requests to your &lt;em&gt;Go&lt;/em&gt; binary HTTP-based handler.  The packaging step also includes NodeJS code to support CloudFormation custom resources for services such as
API Gateway configuration and S3 push source configuration.  Finally, a known version of the AWS SDK is included (that&amp;rsquo;s the _node&lt;em&gt;modules&lt;/em&gt; copying you&amp;rsquo;ll see if you enable &lt;code&gt;debug&lt;/code&gt; verbosity) that&amp;rsquo;s likely newer than the one included in the &lt;a href=&#34;https://aws.amazon.com/releasenotes/AWS-Lambda&#34;&gt;AWS Lambda runtime&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Over time it&amp;rsquo;s expected that CloudFormation grows to support additional services and capabilities, at which point much of the NodeJS code can be eliminated.&lt;/p&gt;

&lt;p&gt;Everything is ZIP&amp;rsquo;d up and ready for S3 upload.&lt;/p&gt;

&lt;h3 id=&#34;a-href-hugoshortcode-6-upload-archive-to-s3-a:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;&lt;a href=&#34;#uploadArchiveToS3:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Upload Archive To S3&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Uploads the archive to S3.  There&amp;rsquo;s not much else to see here.&lt;/p&gt;

&lt;h3 id=&#34;a-href-hugoshortcode-7-generate-cloudformation-template-a:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;&lt;a href=&#34;#generateCFTemplate:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Generate CloudFormation Template&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Once the archive is uploaded and the S3 Item key is available, the  CloudFormation template is generated by marshaling the &lt;code&gt;sparta.LambdaAWSInfo&lt;/code&gt; objects into CloudFormation JSON representations.&lt;/p&gt;

&lt;p&gt;The AWS Lambda marshaling is automatically handled.  This is also the point at which the optional &lt;a href=&#34;https://github.com/mweagle/Sparta/blob/master/sparta.go#L192&#34;&gt;TemplateDecorator&lt;/a&gt; functions are called to annotate the automatically generated template with additional resources.&lt;/p&gt;

&lt;h3 id=&#34;a-href-hugoshortcode-8-upload-cloudformation-template-to-s3-a:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;&lt;a href=&#34;#uploadCFTemplate:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Upload CloudFormation Template to S3&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Uploads the template to S3 to maximize &lt;a href=&#34;http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cloudformation-limits.html&#34;&gt;template size&lt;/a&gt;.  There&amp;rsquo;s not much else to see here.&lt;/p&gt;

&lt;h3 id=&#34;a-href-hugoshortcode-9-create-update-stack-a:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;&lt;a href=&#34;#createUpdateStack:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Create/Update Stack&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Finally, the provisioning workflow determines whether the Sparta &lt;code&gt;serviceName&lt;/code&gt; exists and either creates or updates as appropriate.&lt;/p&gt;

&lt;h2 id=&#34;next-steps:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Now that we&amp;rsquo;ve covered how Sparta handles provisioning your stack, we&amp;rsquo;re ready to expand functionality to leverge more of the AWS ecosystem in the &lt;a href=&#34;http://gosparta.io/docs/eventsources&#34;&gt;next section&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>